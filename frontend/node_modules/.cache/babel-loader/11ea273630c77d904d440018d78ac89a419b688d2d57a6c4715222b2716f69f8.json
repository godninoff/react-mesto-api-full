{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      address,\n      headers\n    } = _ref;\n    this._address = address;\n    this._headers = headers;\n  }\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n  getUserInfo() {\n    return fetch(`${this._address}/users/me`, {\n      method: 'GET',\n      headers: this._headers,\n      credentials: \"include\"\n    }).then(res => this._getResponseData(res));\n  }\n  getInitialCards() {\n    return fetch(`${this._address}/cards`, {\n      method: 'GET',\n      headers: this._headers,\n      credentials: \"include\"\n    }).then(res => this._getResponseData(res));\n  }\n  setUserInfo(name, about) {\n    return fetch(`${this._address}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      credentials: \"include\",\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => this._getResponseData(res));\n  }\n  createCard(name, link) {\n    return fetch(`${this._address}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      credentials: \"include\",\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => this._getResponseData(res));\n  }\n  removeCard(id) {\n    return fetch(`${this._address}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers,\n      credentials: \"include\"\n    }).then(res => this._getResponseData(res));\n  }\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(`${this._address}/cards/${id}/likes/`, {\n      method: isLiked ? 'PUT' : 'DELETE',\n      headers: this._headers,\n      credentials: \"include\"\n    }).then(res => this._getResponseData(res));\n  }\n  setUserAvatar(avatarData) {\n    return fetch(`${this._address}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      credentials: \"include\",\n      body: JSON.stringify({\n        avatar: avatarData.avatar\n      })\n    }).then(res => this._getResponseData(res));\n  }\n}\n;\nconst api = new Api({\n  address: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;\n// 'http://localhost:3000'\n// 'https://api.weirdplace.students.nomoredomains.club'","map":{"version":3,"names":["Api","constructor","_ref","address","headers","_address","_headers","_getResponseData","res","ok","Promise","reject","status","json","getUserInfo","fetch","method","credentials","then","getInitialCards","setUserInfo","name","about","body","JSON","stringify","createCard","link","removeCard","id","changeLikeCardStatus","isLiked","setUserAvatar","avatarData","avatar","api"],"sources":["C:/dev/projects/react-mesto-api-full/frontend/src/utils/api.js"],"sourcesContent":["class Api {\r\n    constructor({address, headers}) {\r\n        this._address = address;\r\n        this._headers = headers;\r\n    }\r\n\r\n    _getResponseData(res) {\r\n        if (!res.ok) {\r\n            return Promise.reject(`Ошибка: ${res.status}`); \r\n        }\r\n        return res.json();\r\n      }\r\n\r\ngetUserInfo() {\r\n    return fetch(`${this._address}/users/me`, {\r\n        method: 'GET',\r\n        headers: this._headers,\r\n        credentials: \"include\"\r\n    })\r\n    .then(res => this._getResponseData(res))\r\n}\r\n\r\ngetInitialCards() {\r\n    return fetch(`${this._address}/cards`, {\r\n        method: 'GET',\r\n        headers: this._headers,\r\n        credentials: \"include\"\r\n    })\r\n    .then(res => this._getResponseData(res))\r\n}\r\n\r\nsetUserInfo(name, about) {\r\n    return fetch(`${this._address}/users/me`, {\r\n        method: 'PATCH',\r\n        headers: this._headers,\r\n        credentials: \"include\",\r\n        body: JSON.stringify({\r\n            name: name,\r\n            about: about\r\n        })\r\n    })\r\n    .then(res => this._getResponseData(res))\r\n}\r\n\r\ncreateCard(name, link) {\r\n    return fetch(`${this._address}/cards`, {\r\n        method: 'POST',\r\n        headers: this._headers,\r\n        credentials: \"include\",\r\n        body: JSON.stringify({\r\n            name: name,\r\n            link: link\r\n        })\r\n    })\r\n    .then(res => this._getResponseData(res))\r\n}\r\n\r\nremoveCard(id) {\r\n    return fetch(`${this._address}/cards/${id}`, {\r\n        method: 'DELETE',\r\n        headers: this._headers,\r\n        credentials: \"include\"\r\n    })\r\n    .then(res => this._getResponseData(res))\r\n}\r\n\r\nchangeLikeCardStatus(id, isLiked) {\r\n    return fetch(`${this._address}/cards/${id}/likes/`, {\r\n        method: isLiked ? 'PUT' : 'DELETE',\r\n        headers: this._headers,\r\n        credentials: \"include\"\r\n    })\r\n    .then(res => this._getResponseData(res))\r\n}\r\n\r\nsetUserAvatar(avatarData) {\r\n    return fetch(`${this._address}/users/me/avatar`, {\r\n        method: 'PATCH',\r\n        headers: this._headers,\r\n        credentials: \"include\",\r\n        body: JSON.stringify({\r\n            avatar: avatarData.avatar\r\n        })\r\n    })\r\n    .then(res => this._getResponseData(res))\r\n}\r\n};\r\n\r\nconst api = new Api ({\r\n    address: 'http://localhost:3000',\r\n    headers: {\r\n    'Content-Type': 'application/json'\r\n    },\r\n  });\r\n  \r\n\r\nexport default api;\r\n// 'http://localhost:3000'\r\n// 'https://api.weirdplace.students.nomoredomains.club'"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}